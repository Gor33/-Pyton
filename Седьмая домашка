# Задание 1: Напишите функцию, которая возвращает название валюты (поле ‘Name’) с максимальным значением курса с помощью сервиса www.cbr-xml-daily.ru...ly_json.js

import requests

def max_currency_value():
        all_currencies_value={}
        r = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        response = r.json()['Valute']
        for i in response:
            all_currencies_value[i]=response[i]['Value']
        max_currencies_value_name=max(all_currencies_value.keys(),key=(lambda x:all_currencies_value[x]))
        return response[max_currencies_value_name]['Name']

print(max_currency_value())

# Задание 2: Добавьте в класс Rate параметр diff (со значениями True или False), который в случае значения True в методах курсов валют (eur, usd итд) будет возвращать не курс валюты, а изменение по сравнению в прошлым значением. Считайте, self.diff будет принимать значение True только при возврате значения курса. При отображении всей информации о валюте он не используется.

import requests

class Rate:
    def __init__(self, format='value',diff=False):
        self.format = format
        self.diff=diff


    def exchange_rates(self):
        r = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        return r.json()['Valute']

    def make_format(self, currency):
        response = self.exchange_rates()

        if currency in response:
            if self.format == 'full':
                return response[currency]

            if self.format == 'value':
                if not self.diff:
                    return response[currency]['Value']
                else:
                    return response[currency]['Value']-response[currency]['Previous']

            if self.format=='currency_name':
                return response[currency]['Name']

        return 'Error'

    def eur(self):
        """Возвращает курс евро на сегодня в формате self.format если diff=False иначе именение"""
        return self.make_format('EUR')

    def usd(self):
        """Возвращает курс доллара на сегодня в формате self.format"""
        return self.make_format('USD')


print (Rate(format='currency_name').make_format('EUR'))
print ("Изменение по сравнению c прошлым значением {:.3f}".format(Rate(diff=True).eur()))

# Задание 3: Напишите класс Designer, который учитывает количество международных премий. Подсказки в коде занятия (“Ноутбук к лекциям «Понятие класса» + презентация”, zip-файл “Используемый ноутбук к лекциям «Понятие класса»).

# Комментарий по классу Designer такой: Напишите класс Designer, который учитывает количество международных премий для дизайнеров (из презентации: “Повышение на 1 грейд за каждые 7 баллов. Получение международной премии – это +2 балла”). Считайте, что при выходе на работу сотрудник уже имеет две премии и их количество не меняется со стажем (конечно если хотите это можно вручную менять).

class Employee:
    def __init__(self, name, seniority):
        self.name = name
        self.seniority = seniority
        
    @property
    def grade(self):
        return floor(self.seniority / 2)
    
    def publish_grade(self):
        """Публикация результатов аккредитации сотрудников"""
        print(self.name, self.grade)
# my work
from math import floor

class Designer(Employee):
    def __init__(self, name, seniority, inter_prize=2):
        super().__init__(name, seniority)
        self.inter_prize = inter_prize;

    @property
    def grade(self):
        return floor((self.inter_prize * 2 + self.seniority) / 7)
    
    def give_a_prize(self):
        print('New prize!')
        self.inter_prize += 1
        
    def check_if_it_is_time_for_upgrade(self):
        self.seniority += 1

        return self.publish_grade()
        
elena = Designer(
    name='Елена',
    seniority=2
);

for i in range(20):
    elena.check_if_it_is_time_for_upgrade()
    
for i in range(5):
    elena.give_a_prize()

for i in range(20):
    elena.check_if_it_is_time_for_upgrade()

